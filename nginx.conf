#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    client_max_body_size 24m;
    client_body_buffer_size 24m;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '"$upstream_connect_time" "$upstream_response_time"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    server {
        listen       9100;
        resolver 202.106.0.20;

        add_header X-Via-Ufop "transformer";

        location ~ ^http {
            internal;
            proxy_pass $uri$is_args$args;
        }

        location = / {
            deny all;
        }

        location = /health {
            content_by_lua '
                ngx.say("I am ok");
            ';
        }

        location /handler {
            set $query_url "";

            access_by_lua_block {
                if ngx.req.get_method() ~= "GET" then
                    ngx.exit(ngx.HTTP_NOT_ALLOWED)
                end

                if ngx.var.arg_url then
                    ngx.var.query_url = ngx.unescape_uri(ngx.var.arg_url);
                end
                
                --if ( $arg_url !~* ^http) {
                --    return 400;
                --}
            }

            content_by_lua '
                local query_url = ngx.var.query_url
                local res = ngx.location.capture(query_url);
                if res.status == ngx.HTTP_OK then
                    ngx.print(res.body);
                else
                    query_url = "http://img0.qianbao.com/public/qianbaolife/89aa0cdafc9254a88dfe3622843d28a4.png";
                    res = ngx.location.capture(query_url);
                    ngx.print(res.body);
                end
            ';
  
            proxy_hide_header "Content-Type";
        }
    }
}
